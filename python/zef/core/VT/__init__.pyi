# Copyright 2022 Synchronous Technologies Pte Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from .value_type import *

AET: ValueType_ = ...
AET_Enum: ValueType_ = ...
AET_QFloat: ValueType_ = ...
AET_QInt: ValueType_ = ...
Any: ValueType_ = ...
Atom: ValueType_ = ...
AtomClass: ValueType_ = ...
AtomConcrete: ValueType_ = ...
AtomRef: ValueType_ = ...
AttributeEntity: ValueType_ = ...
AttributeEntityAtom: ValueType_ = ...
AttributeEntityConcrete: ValueType_ = ...
AttributeEntityFlatRef: ValueType_ = ...
AttributeEntityRef: ValueType_ = ...
AttributeEntityTypeToken: ValueType_ = ...
Awaitable: ValueType_ = ...
BT: ValueType_ = ...
BaseUID: ValueType_ = ...
BlobPtr: ValueType_ = ...
BlobTypeToken: ValueType_ = ...
Bool: ValueType_ = ...
Bytes: ValueType_ = ...
Complement: ValueType_ = ...
Cond: ValueType_ = ...
Contains: ValueType_ = ...
CustomEntity: ValueType_ = ...
DB: ValueType_ = ...
DataFrame: ValueType_ = ...
Decimal: ValueType_ = ...
Delegate: ValueType_ = ...
DelegateAtom: ValueType_ = ...
DelegateConcrete: ValueType_ = ...
DelegateRef: ValueType_ = ...
Dict: ValueType_ = ...
ET: ValueType_ = ...
EZefRef: ValueType_ = ...
Effect: ValueType_ = ...
EffectType: ValueType_ = ...
EndsWith: ValueType_ = ...
Entity: ValueType_ = ...
EntityAtom: ValueType_ = ...
EntityConcrete: ValueType_ = ...
EntityFlatRef: ValueType_ = ...
EntityRef: ValueType_ = ...
EntityTypeToken: ValueType_ = ...
EntityValueInstance: ValueType_ = ...
Enum: ValueType_ = ...
Error: ValueType_ = ...
EternalUID: ValueType_ = ...
FlatGraph: ValueType_ = ...
FlatRef: ValueType_ = ...
FlatRefs: ValueType_ = ...
Float: ValueType_ = ...
Graph: ValueType_ = ...
GraphRef: ValueType_ = ...
GraphSlice: ValueType_ = ...
HasUID: ValueType_ = ...
HasValue: ValueType_ = ...
Image: ValueType_ = ...
Int: ValueType_ = ...
Intersection: ValueType_ = ...
Is: ValueType_ = ...
LazyValue: ValueType_ = ...
List: ValueType_ = ...
NamedAny: ValueType_ = ...
NamedZ: ValueType_ = ...
Nil: ValueType_ = ...
OperatesOn: ValueType_ = ...
Optional: ValueType_ = ...
Pattern: ValueType_ = ...
PyBool: ValueType_ = ...
PyBytes: ValueType_ = ...
PyDict: ValueType_ = ...
PyFloat: ValueType_ = ...
PyInt: ValueType_ = ...
PyList: ValueType_ = ...
PySet: ValueType_ = ...
PyTuple: ValueType_ = ...
QuantityFloat: ValueType_ = ...
QuantityInt: ValueType_ = ...
Query: ValueType_ = ...
RAE: ValueType_ = ...
RAEConcrete: ValueType_ = ...
RAEFlatRef: ValueType_ = ...
RAERef: ValueType_ = ...
RAET: ValueType_ = ...
RP: ValueType_ = ...
RT: ValueType_ = ...
RelatedOps: ValueType_ = ...
Relation: ValueType_ = ...
RelationAtom: ValueType_ = ...
RelationConcrete: ValueType_ = ...
RelationFlatRef: ValueType_ = ...
RelationRef: ValueType_ = ...
RelationTypeToken: ValueType_ = ...
Root: ValueType_ = ...
RootAtom: ValueType_ = ...
RootConcrete: ValueType_ = ...
RootFlatRef: ValueType_ = ...
RootRef: ValueType_ = ...
SameAs: ValueType_ = ...
Set: ValueType_ = ...
SetOf: ValueType_ = ...
StartsWith: ValueType_ = ...
Stream: ValueType_ = ...
String: ValueType_ = ...
SymbolicExpression: ValueType_ = ...
TX: ValueType_ = ...
TXNodeAtom: ValueType_ = ...
TXNodeConcrete: ValueType_ = ...
TXNodeFlatRef: ValueType_ = ...
TXNodeRef: ValueType_ = ...
Time: ValueType_ = ...
Tuple: ValueType_ = ...
UID: ValueType_ = ...
Union: ValueType_ = ...
UsedFor: ValueType_ = ...
UserValueInstance: ValueType_ = ...
UserValueType: ValueType_ = ...
VRT: ValueType_ = ...
VRT_Enum: ValueType_ = ...
VRT_QFloat: ValueType_ = ...
VRT_QInt: ValueType_ = ...
Val: ValueType_ = ...
ValAtom: ValueType_ = ...
ValConcrete: ValueType_ = ...
ValueNode: ValueType_ = ...
ValueRepTypeToken: ValueType_ = ...
ValueType: ValueType_ = ...
Variable: ValueType_ = ...
Where: ValueType_ = ...
ZExpression: ValueType_ = ...
ZefFunction: ValueType_ = ...
ZefGenerator: ValueType_ = ...
ZefOp: ValueType_ = ...
ZefRef: ValueType_ = ...
ZefRefUID: ValueType_ = ...
