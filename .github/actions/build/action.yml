name: 'Build'
inputs:
  with-julia:
    # Note that all inputs are strings - which means we need to compare more
    # carefully later
    default: 'false'
    required: false
  python-version:
    type: string
    required: true
  os:
    type: string
    required: true

  # build-wheel:
  #   default: 'false'
  #   required: false
  run-tests:
    default: 'true'
    required: false

runs:
  using: 'composite'
  steps:

    - name: Setup compiler on windows
      if: ${{ startsWith(inputs.os, 'windows') }}
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: '17'

    ########
    # Python

    - name: Setup python on linux and windows
      if: ${{ !startsWith(inputs.os, 'macos') }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.python-version }}

    - name: install python from homebrew
      if: ${{ startsWith(inputs.os, 'macos') }}
      env:
        PYVERSION: ${{ inputs.python-version }}
      shell: bash
      run: |
        brew install python@$PYVERSION || echo "Would have errored"
        brew link --overwrite python@$PYVERSION

    - name: show the actual python binary used
      shell: bash
      run: |
        ls -la `which python3`

    - name: identify pip cache directory
      id: pipdir
      shell: bash
      run: |
        python3 -m pip install --upgrade pip
        echo ::set-output name=pipdir::$(pip3 cache dir)

    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pipdir.outputs.pipdir }}
        key: pip-${{ inputs.os }}-${{ inputs.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          pip-${{ inputs.os }}-${{ inputs.python-version }}-

    ########
    # Julia

    # - name: Julia cache
    #   uses: actions/cache@v2
    #   with:
    #     path: ~/.julia
    #     key: ${{ runner.os }}-julia_depot-${{ steps.pipdir.outputs.pyver }}-${{ hashFiles('**/Manifest.toml', '**/Project.toml') }}
    #     restore-keys: |
    #       ${{ runner.os }}-julia_depot-${{ steps.pipdir.outputs.pyver }}

    - uses: julia-actions/setup-julia@v1
      if: inputs.with-julia == 'true'
      id: julia_install
    - name: overwrite julia libstdc++
      if: inputs.with-julia == 'true'
      # continue-on-error: true
      shell: bash
      run: |
        rm ${{ steps.julia_install.outputs.julia-bindir }}/../lib/julia/libstdc++.so.6 || echo "Would have had an error"
    - name: setup julia registry
      if: inputs.with-julia == 'true'
      shell: bash
      run: |
        julia -e 'using Pkg; Registry.add("General"); Registry.add(RegistrySpec(url="https://github.com/synchronoustechnologies/JuliaRegistry"))'

    - name: Force local python in julia
      if: inputs.with-julia == 'true'
      # This is necessary because PyCall tries to use Conda (very slow and breaks) on macos and windows
      shell: bash
      run: |
        export PYTHON=$(which python3)
        julia -e 'using Pkg; Pkg.add("PyCall")'
        julia -e 'using PyCall; sys = pyimport("sys"); @show sys.path'

    ########
    # Making
    - name: Grab ubuntu packages
      if: ${{ startsWith(inputs.os, 'ubuntu') }}
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y zstd libzstd-dev openssl libssl-dev libcurl4-openssl-dev ninja-build jq

    - name: Grab homebrew packages
      if: ${{ startsWith(inputs.os, 'macos') }}
      shell: bash
      run: |
        brew install ninja openssl@1.1 zstd jq coreutils
        echo
        brew --prefix
        echo
        brew --prefix openssl@1.1

    # Only do the make if the C++ files and their deps have changed. These deps
    # are everything inside of core, but also things like the tokens files from
    # get_zeftypes.py, so we need to call that first, polluting the source
    # directory.

    - name: Get zeftypes early for cache check
      shell: bash
      run: |
        cd core
        python3 ../scripts/get_zeftypes.py

    - name: Check cache for build
      id: build-cache
      uses: actions/cache@v3
      with:
        key: build-cache-v6-${{ inputs.python-version }}-${{ inputs.os }}-${{ hashFiles('core/**', 'python/pyzef/**') }}
        path: |
          core
          python/pyzef
          python/zef/pyzef.*

    # Note: we can't use restore-keys above as cmake only uses timestamps to
    # identify different files. If this were to be done properly, we would need
    # to compare the hash for each file individually.

    # From here, if we do have to rebuild, then the zeftypes that were obtained
    # above will force a re-cog of the files and only if they change should
    # cmake then rebuild.

    - name: Make
      if: steps.build-cache.outputs.cache-hit != 'true'
      env:
        WITH_JULIA: ${{ (inputs.with-julia == 'true') && '1' || '0' }}
      shell: bash
      run: |
        bash compile_for_local_dev.sh

    #########
    # Testing
    - name: Prep for python tests
      if: inputs.run-tests == 'true'
      shell: bash
      run: |
        pip3 install -r python/requirements.txt
        pip3 install -r python/tests/requirements_tests.txt

    - name: Check no created tokens
      if: ${{ inputs.run-tests == 'true' && !startsWith(inputs.os, 'windows') }}
      shell: bash
      env:
        ZEFDB_OFFLINE_MODE: TRUE
      run: |
        export PYTHONPATH="${GITHUB_WORKSPACE}/python:$PYTHONPATH"
        bash scripts/assert_no_created_tokens.sh

    # - name: install gdb from homebrew
    #   if: ${{ startsWith(inputs.os, 'macos') }}
    #   shell: bash
    #   run: |
    #     brew install gdb || echo "Would have errored"

    - name: Try to catch segfault core dump
      if: ${{ inputs.run-tests == 'true' && !startsWith(inputs.os, 'windows') }}
      shell: bash
      env:
        ZEFDB_DEVELOPER_OUTPUT: YES
        ZEFHUB_AUTH_KEY: GUEST
      run: |
        export PYTHONPATH="${GITHUB_WORKSPACE}/python:$PYTHONPATH"
        for a in python/tests/test*.py ; do
          echo
          echo
          echo $a
          set +e
          ulimit -c unlimited

          # lldb --batch --one-line "run" --one-line-on-crash "thread backtrace all" -- $(which python3) $a
          # echo "settings set target.process.stop-on-exec false\nrun" > lldb_commands
          echo "settings set target.process.stop-on-exec false" > lldb_commands
          echo "run" >> lldb_commands
          echo "thread backtrace all" >> lldb_commands
          lldb --batch --source lldb_commands --one-line-on-crash "thread backtrace all" -- $(which python3) $a
          exit 1
          # python3 $a 
          # if [[ "$?" == "139" ]] ; then
          #   echo "ls /cores"
          #   ls /cores
          #   echo "ls"
          #   ls
          #   file core
          #   # echo "backtrace ; quit" > lldb_commands
          #   # lldb --core core --source lldb_commands
          #   echo "thread backtrace all"
          #   exit 1
          # fi
        done

    - name: Run developer output python tests linux/macos
      if: ${{ inputs.run-tests == 'true' && !startsWith(inputs.os, 'windows') }}
      shell: bash
      env:
        ZEFDB_DEVELOPER_OUTPUT: YES
        ZEFHUB_AUTH_KEY: GUEST
      run: |
        export PYTHONPATH="${GITHUB_WORKSPACE}/python:$PYTHONPATH"
        for a in python/tests/test*.py ; do
          echo
          echo
          echo $a
          python3 $a 
        done

    - name: Run python tests linux/macos
      if: ${{ inputs.run-tests == 'true' && !startsWith(inputs.os, 'windows') }}
      shell: bash
      env:
        ZEFDB_QUIET: YES
        ZEFHUB_AUTH_KEY: GUEST
      run: |
        export PYTHONPATH="${GITHUB_WORKSPACE}/python:$PYTHONPATH"
        python3 python/tests/quick_start.py
        python3 -mpytest python/tests

    - name: Run python tests
      if: ${{ inputs.run-tests == 'true' && startsWith(inputs.os, 'windows') }}
      shell: cmd
      env:
        ZEFDB_QUIET: YES
        ZEFHUB_AUTH_KEY: GUEST
      run: |
        set "PYTHONPATH=%GITHUB_WORKSPACE%/python;%PYTHONPATH%"
        copy python\pyzef\build\Release\pyzef.* python\zef
        python3 python/tests/quick_start.py
        # Because of some strange weirdness, going to try unittest here instead of pytest
        #python3 -mpytest python/tests
        python3 -munittest discover -s python/tests